{"ast":null,"code":"var _jsxFileName = \"D:\\\\Application Developement\\\\trading-confluence-dashboard\\\\frontend\\\\trade-wizard\\\\src\\\\components\\\\Reports.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Reports() {\n  _s();\n  const [trades, setTrades] = useState([]);\n  useEffect(() => {\n    const fetchTrades = async () => {\n      try {\n        const response = await axios.get('/api/trades');\n        setTrades(response.data);\n      } catch (error) {\n        console.error('Error fetching trades:', error);\n      }\n    };\n    fetchTrades();\n  }, []);\n  const calculateProfitLoss = () => {\n    // Implement your profit/loss calculation logic here\n    return trades.reduce((acc, trade) => acc + trade.price * trade.quantity, 0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reports\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Profit/Loss: \", calculateProfitLoss()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(Reports, \"mcU/+BRW5PHnF8CI1fLht7e8sI8=\");\n_c = Reports;\nexport default Reports;\nvar _c;\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Reports","_s","trades","setTrades","fetchTrades","response","get","data","error","console","calculateProfitLoss","reduce","acc","trade","price","quantity","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Application Developement/trading-confluence-dashboard/frontend/trade-wizard/src/components/Reports.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Reports() {\r\n    const [trades, setTrades] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchTrades = async () => {\r\n            try {\r\n                const response = await axios.get('/api/trades');\r\n                setTrades(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching trades:', error);\r\n            }\r\n        };\r\n        fetchTrades();\r\n    }, []);\r\n\r\n    const calculateProfitLoss = () => {\r\n        // Implement your profit/loss calculation logic here\r\n        return trades.reduce((acc, trade) => acc + (trade.price * trade.quantity), 0);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Reports</h2>\r\n            <p>Total Profit/Loss: {calculateProfitLoss()}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Reports;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,aAAa,CAAC;QAC/CH,SAAS,CAACE,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IACDJ,WAAW,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,mBAAmB,GAAGA,CAAA,KAAM;IAC9B;IACA,OAAOR,MAAM,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,GAAIC,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACE,QAAS,EAAE,CAAC,CAAC;EACjF,CAAC;EAED,oBACIhB,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBrB,OAAA;MAAAiB,QAAA,GAAG,qBAAmB,EAACN,mBAAmB,CAAC,CAAC;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEd;AAACnB,EAAA,CA1BQD,OAAO;AAAAqB,EAAA,GAAPrB,OAAO;AA4BhB,eAAeA,OAAO;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}